<?php

namespace app\commands;

use app\helpers\ParserConfig;
use app\models\BenchmarkResult;
use RecursiveDirectoryIterator;
use RecursiveIteratorIterator;
use yii\console\Controller;
use yii\console\ExitCode;

/**
 * Class HelloController
 * @package app\commands
 */
class RobbingController extends Controller
{

    private $repositoriesDir;

    public function init()
    {
        parent::init(); // TODO: Change the autogenerated stub
    }


    /**
     * MatomoDeviceDetector get all paths
     * @return array
     */
    private function getFixturesMatomoDeviceParser(): array
    {
        $path = $this->repositoriesDir;
        $this->stdout('get fixtures paths in ' . ParserConfig::PROJECT_MATOMO_DEVICE_DETECTOR);
        // MatomoDeviceDetector get all paths
        $basePath = $path . ParserConfig::PROJECT_MATOMO_DEVICE_DETECTOR;

        return [
            ...glob($basePath . '/Tests/fixtures/*.yml'),
            ...glob($basePath . '/Tests/Parser/Client/fixtures/*.yml'),
            ...glob($basePath . '/Tests/Parser/Device/fixtures/*.yml'),
            ...glob($basePath . '/Tests/Parser/fixtures/*.yml'),
        ];
    }

    /**
     * WhichBrowserParser get paths
     * @return array
     */
    private function getFixturesWhichBrowserParser(): array
    {
        $path = $this->repositoriesDir;
        $this->stdout('get fixtures paths in ' . ParserConfig::PROJECT_WHICHBROWSER_PARSER);
        $basePath = $path . ParserConfig::PROJECT_WHICHBROWSER_PARSER;
        $dirs = glob($basePath . DIRECTORY_SEPARATOR . 'tests/data/*', GLOB_ONLYDIR);

        $whichbrowserFixtures = [];
        foreach ($dirs as $dir) {
            $whichbrowserFixtures = array_merge($whichbrowserFixtures, [
                ...glob($dir . DIRECTORY_SEPARATOR . '*.{yaml,yml}', GLOB_BRACE)
            ]);
        }

        return $whichbrowserFixtures;
    }

    /**
     * Mimmi20BrowserDetector get paths
     * @return array
     */
    private function getFixturesMimmi20BrowserDetectorParser(): array
    {
        $path = $this->repositoriesDir;
        $this->stdout('get fixtures paths in ' . ParserConfig::PROJECT_MIMMI20_BROWSER_DETECTOR);
        $basePath = $path . ParserConfig::PROJECT_MIMMI20_BROWSER_DETECTOR;

        $ridi = new RecursiveIteratorIterator(new RecursiveDirectoryIterator($basePath . DIRECTORY_SEPARATOR . 'tests/data'));
        $mimmi20Fixtures = [];
        foreach ($ridi as $file) {
            if ($file->isDir()) {
                continue;
            }
            if (pathinfo($file->getPathname(), PATHINFO_EXTENSION) !== 'json') {
                continue;
            }
            $mimmi20Fixtures[] = $file->getPathname();
        }
        return $mimmi20Fixtures;
    }

    public function actionIndex($checkExist = false)
    {
        $matomoFixtures = $this->getFixturesMatomoDeviceParser();
        $whichbrowserFixtures = $this->getFixturesWhichBrowserParser();
        $mimmi20Fixtures = $this->getFixturesMimmi20BrowserDetectorParser();

        $repositoryFixtures = [
            ParserConfig::PROJECT_MATOMO_DEVICE_DETECTOR => [
                'files' => [...$matomoFixtures]
            ],
            ParserConfig::PROJECT_WHICHBROWSER_PARSER => [
                'files' => [...$whichbrowserFixtures]
            ],
            ParserConfig::PROJECT_MIMMI20_BROWSER_DETECTOR => [
                'files' => [...$mimmi20Fixtures]
            ],
        ];
        foreach ($repositoryFixtures as $repositoryId => $item) {

            $sourceParserId = ParserConfig::getSourceIdByRepository($repositoryId);

            $this->stdout(sprintf('-> <info>grab repository: %s</info>' . PHP_EOL, $repositoryId));
            foreach ($item['files'] as $file) {
                if (empty($file)) {
                    continue;
                }
                $useragents = $this->parseFixtureFile($repositoryId, $file);

                $this->stdout(sprintf('--> <info>:ðŸ—ƒ file: %s</info>', $file));
//                $progressBar = new ProgressBar($output, count($useragents));
                foreach ($useragents as $useragent) {
//                    $progressBar->advance();
                    if (empty($useragent)) {
                        continue;
                    }
                    $benchmarkResult = null;
                    if ($checkExist) {
                        $benchmarkResult = BenchmarkResult::findOne([
                            'user_agent' => $useragent,
                            'source_id' => $sourceParserId
                        ]);
                    }
                    // save
                    if ($benchmarkResult === null) {
                        $benchmarkResult = new BenchmarkResult([
                            'user_agent' => $useragent,
                            'source_id' => $sourceParserId
                        ]);
                        $benchmarkResult->save();
                    }
                }

            }
        }

        return 0;
    }

}
